// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../src/@generated/prisma-nestjs-graphql"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique @db.VarChar(255)
  name     String?    @db.VarChar(255)
  projects Project[]
  studies  Study[]
  tasks    Task[]
  password Password[]
}

model Password {
  id     Int    @id @default(autoincrement())
  hash   String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model Project {
  id Int @id @default(autoincrement())

  token String @unique @default(cuid())

  name String @db.VarChar(128)

  description String @db.VarChar(256)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studies   Study[]

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int
}

model Study {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(128)

  description String @db.VarChar(256)

  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int

  tasks Task[]

  respondents Respondent[]

  preStudyQuestionnaire    Questionnaire? @relation(fields: [preStudyQuestionnaireId], references: [id], name: "preStudyQuestionnaire")
  postStudyQuestionnaire   Questionnaire? @relation(fields: [postStudyQuestionnaireId], references: [id], name: "postStudyQuestionnaire")
  preStudyQuestionnaireId  Int?
  postStudyQuestionnaireId Int?
}

model Task {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  text String @db.VarChar(255)

  study   Study @relation(fields: [studyId], references: [id])
  studyId Int

  isRequired Boolean @default(false)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User?            @relation(fields: [userId], references: [id])
  userId         Int?
  RespondentTask RespondentTask[]
}

model Respondent {
  id Int @id @default(autoincrement())

  identifier String @db.VarChar(255)

  study          Study            @relation(fields: [studyId], references: [id])
  studyId        Int
  answers        Answer[]
  RespondentTask RespondentTask[]
}

model Questionnaire {
  id Int @id @default(autoincrement())

  questions   Question[]
  preStudies  Study[]    @relation("preStudyQuestionnaire")
  postStudies Study[]    @relation("postStudyQuestionnaire")
}

model Question {
  id Int @id @default(autoincrement())

  text String @db.Text

  type QuestionType

  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  questionnaireId Int
  answers         Answer[]
  options         Option[]
}

enum QuestionType {
  SINGLE_LINE
  MULTI_LINE
  NUMBER
  RADIO
  CHECKBOX
  SELECT
}

model Option {
  id Int @id @default(autoincrement())

  text String @db.VarChar(255)

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answers    Answer[]
}

model Answer {
  id Int @id @default(autoincrement())

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  text String? @db.VarChar(255)

  option   Option? @relation(fields: [optionId], references: [id])
  optionId Int?

  respondent   Respondent @relation(fields: [respondentId], references: [id])
  respondentId Int
}

model RespondentTask {
  id Int @id @default(autoincrement())

  respondent   Respondent @relation(fields: [respondentId], references: [id])
  respondentId Int

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  completedAt DateTime?
  startedAt   DateTime?

  skippedAt DateTime?
}
