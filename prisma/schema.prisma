// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id Int @id @default(autoincrement())

  /// @Validator.IsEmail()
  email String @unique @db.VarChar(255)

  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(128)
  name    String? @db.VarChar(128)
  studies Study[]
  tokens  Token[]

  /// @HideField()
  /// @Validator.MinLength(6)
  /// @Validator.MaxLength(128)
  password String? @db.VarChar(128)
}

model Token {
  id Int @id @default(autoincrement())

  /// @Validaor.MinLength(3)
  /// @Validator.MaxLength(128)
  name String @db.VarChar(128)

  token String @default(cuid()) @db.VarChar(255)

  createdBy   User @relation(fields: [createdById], references: [id])
  createdById Int

  Study Study[]
}

enum StudyStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

model Study {
  id Int @id @default(autoincrement())

  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(128)
  name String @db.VarChar(128)

  status StudyStatus @default(DRAFT)

  /// @Validator.MinLength(0)
  /// @Validator.MaxLength(128)
  /// @Validator.IsOptional()
  description String? @db.VarChar(128)

  token   Token? @relation(fields: [tokenId], references: [id])
  tokenId Int?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int

  tasks Task[]

  respondents Respondent[]

  preStudyQuestionnaire    Questionnaire? @relation(fields: [preStudyQuestionnaireId], references: [id], name: "preStudyQuestionnaire")
  postStudyQuestionnaire   Questionnaire? @relation(fields: [postStudyQuestionnaireId], references: [id], name: "postStudyQuestionnaire")
  preStudyQuestionnaireId  Int?
  postStudyQuestionnaireId Int?
}

model Task {
  id Int @id @default(autoincrement())

  name String @db.VarChar(128)

  /// @Validator.MinLength(1)
  /// @Validator.MaxLength(500)
  text String @db.VarChar(500)

  study   Study @relation(fields: [studyId], references: [id])
  studyId Int

  isRequired Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RespondentTask RespondentTask[]
}

model Respondent {
  id Int @id @default(autoincrement())

  identifier String @db.VarChar(255)

  study   Study @relation(fields: [studyId], references: [id])
  studyId Int

  answers        Answer[]
  RespondentTask RespondentTask[]
}

model Questionnaire {
  id Int @id @default(autoincrement())

  questions   Question[]
  preStudies  Study[]    @relation("preStudyQuestionnaire")
  postStudies Study[]    @relation("postStudyQuestionnaire")
}

model Question {
  id Int @id @default(autoincrement())

  /// @Validator.MinLength(3)
  /// @Validator.MaxLength(500)
  text String @db.Text

  type QuestionType

  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  questionnaireId Int
  answers         Answer[]
  options         Option[]
}

enum QuestionType {
  SINGLE_LINE
  MULTI_LINE
  NUMBER
  RADIO
  CHECKBOX
  SELECT
}

model Option {
  id Int @id @default(autoincrement())

  /// @Validator.MinLength(1)
  /// @Validator.MaxLength(255)
  text String @db.VarChar(255)

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answers    Answer[]
}

model Answer {
  id Int @id @default(autoincrement())

  question   Question @relation(fields: [questionId], references: [id])
  questionId Int

  /// @Validator.MinLength(1)
  /// @Validator.MaxLength(255)
  text String? @db.VarChar(255)

  option   Option? @relation(fields: [optionId], references: [id])
  optionId Int?

  respondent   Respondent @relation(fields: [respondentId], references: [id])
  respondentId Int
}

model RespondentTask {
  id Int @id @default(autoincrement())

  respondent   Respondent @relation(fields: [respondentId], references: [id])
  respondentId Int

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  completedAt DateTime?
  skippedAt   DateTime?
  createdAt   DateTime  @default(now())
}
